import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { ApiCall } from "../../app/hooks";

export interface UserRepoState {
  repo: [];
  status: "idle" | "loading" | "failed";
}

const initialState: UserRepoState = {
  repo: [],
  status: "idle",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(userRepoAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

interface Props {
  name: string;
  per_page: number;
  page: number;
  direction: string;
  type: string;
  sort: string;
}

export const userRepoAsync = createAsyncThunk(
  "userRepo/userRepoDetails",
  async (props: Props) => {
    try {
      const response = await ApiCall.get(`search/users?q=${props.name}`, {
        params: {
          // type: props.type,
          sort: props.sort,
          direction: props.direction,
          per_page: props.per_page,
          page: props.page,
          order: "",
        },
      });
      return response.data;
    } catch (err) {
      return err;
    }
  }
);

export const userRepoSlice = createSlice({
  name: "userRepo",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(userRepoAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(userRepoAsync.fulfilled, (state, action: PayloadAction<any>) => {
        state.status = "idle";
        state.repo = action.payload;
      })
      .addCase(userRepoAsync.rejected, (state) => {
        state.status = "failed";
      });
  },
});

export default userRepoSlice.reducer;
